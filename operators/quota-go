package main

import (
	"context"
	"fmt"
	"log"
	"os"

	corev1 "k8s.io/api/core/v1"
	"k8s.io/apimachinery/pkg/apis/meta/v1/unstructured"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/types"
	"k8s.io/client-go/kubernetes"
	"k8s.io/client-go/tools/clientcmd"
	"sigs.k8s.io/controller-runtime/pkg/client"
	"sigs.k8s.io/controller-runtime/pkg/client/config"
	ctrl "sigs.k8s.io/controller-runtime"
	"sigs.k8s.io/controller-runtime/pkg/controller/controllerutil"
	"sigs.k8s.io/controller-runtime/pkg/handler"
	"sigs.k8s.io/controller-runtime/pkg/log/zap"
	"sigs.k8s.io/controller-runtime/pkg/manager"
	"sigs.k8s.io/controller-runtime/pkg/reconcile"
	"sigs.k8s.io/controller-runtime/pkg/source"
)

const (
	userQuotaAPIVersion = "example.com/v1"
	userQuotaKind       = "UserQuota"
)

type UserQuota struct {
	Limits   corev1.ResourceList `json:"limits,omitempty"`
	Requests corev1.ResourceList `json:"requests,omitempty"`
}

func main() {
	logger := zap.New()
	ctrl.SetLogger(logger)

	cfg, err := config.GetConfig()
	if err != nil {
		log.Fatalf("Failed to get Kubernetes config: %v", err)
	}

	kubeClient, err := kubernetes.NewForConfig(cfg)
	if err != nil {
		log.Fatalf("Failed to create Kubernetes client: %v", err)
	}

	mgr, err := manager.New(cfg, manager.Options{})
	if err != nil {
		log.Fatalf("Failed to create controller manager: %v", err)
	}

	err = ctrl.NewControllerManagedBy(mgr).
		For(&UserQuota{}).
		Watches(&source.Kind{Type: &UserQuota{}}, &handler.EnqueueRequestForObject{}).
		Complete(&quotaReconciler{
			client: kubeClient.CoreV1(),
		})
	if err != nil {
		log.Fatalf("Failed to start controller: %v", err)
	}

	log.Println("Starting UserQuota operator...")
	err = mgr.Start(ctrl.SetupSignalHandler())
	if err != nil {
		log.Fatalf("Failed to start controller manager: %v", err)
	}
}

type quotaReconciler struct {
	client kubernetes.CoreV1Interface
}

func (r *quotaReconciler) Reconcile(ctx context.Context, req reconcile.Request) (reconcile.Result, error) {
	log.Printf("Reconciling UserQuota: %s/%s", req.Namespace, req.Name)

	// Fetch the UserQuota resource
	userQuota := &UserQuota{}
	err := r.client.RESTClient().
		Get().
		Namespace(req.Namespace).
		Resource("userquotas").
		Name(req.Name).
		VersionedParams(&types.RequestParams{
			Kind:    userQuotaKind,
			APIPath: fmt.Sprintf("/apis/%s/%s/%s", userQuotaAPIVersion, userQuotaKind, req.Namespace),
		}).
		Do(ctx).
		Into(userQuota)
	if err != nil {
		return reconcile.Result{}, fmt.Errorf("failed to fetch UserQuota: %v", err)
	}

	// Fetch the corresponding ResourceQuota
	resourceQuota := &corev1.ResourceQuota{}
	err = r.client.RESTClient().
		Get().
		Namespace(req.Namespace).
		Resource("resourcequotas").
		Name(req.Name+"-quota").
		Do(ctx).
		Into(resourceQuota)

	if err != nil {
		// If ResourceQuota doesn't exist, create a new one
		if client.IgnoreNotFound(err) != nil {
			return reconcile.Result{}, fmt.Errorf("failed to fetch ResourceQuota: %v", err)
		}
		resourceQuota = &corev1.ResourceQuota{
			ObjectMeta: metav1.ObjectMeta{
				Name:      req.Name + "-quota",
				Namespace: req.Namespace,
			},
			Spec: corev1.ResourceQuotaSpec{},
		}
		err = controllerutil.SetControllerReference(userQuota, resourceQuota, scheme)
		if err != nil {
			return reconcile.Result{}, fmt.Errorf("failed to set owner reference: %v", err)
		}
	} else {
		// Remove existing hard limits from ResourceQuota
		resourceQuota.Spec.Hard = corev1.ResourceList{}
	}

	// Update the ResourceQuota based on requests and limits
	resourceQuota.Spec.Hard["requests.cpu"] = userQuota.Requests["cpu"]
	resourceQuota.Spec.Hard["requests.memory"] = userQuota.Requests["memory"]
	resourceQuota.Spec.Hard["limits.cpu"] = userQuota.Limits["cpu"]
	resourceQuota.Spec.Hard["limits.memory"] = userQuota.Limits["memory"]

	// Create or update the ResourceQuota
	if resourceQuota.ObjectMeta.CreationTimestamp.IsZero() {
		err = r.client.RESTClient().
			Post().
			Namespace(req.Namespace).
			Resource("resourcequotas").
			Body(resourceQuota).
			Do(ctx).
			Error()
		if err != nil {
			return reconcile.Result{}, fmt.Errorf("failed to create ResourceQuota: %v", err)
		}
	} else {
		err = r.client.RESTClient().
			Put().
			Namespace(req.Namespace).
			Resource("resourcequotas").
			Name(req.Name+"-quota").
			Body(resourceQuota).
			Do(ctx).
			Error()
		if err != nil {
			return reconcile.Result{}, fmt.Errorf("failed to update ResourceQuota: %v", err)
		}
	}

	log.Printf("ResourceQuota updated for UserQuota: %s/%s", req.Namespace, req.Name)
	return reconcile.Result{}, nil
}
